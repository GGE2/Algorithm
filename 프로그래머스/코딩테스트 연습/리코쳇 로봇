import java.util.*;
import java.io.*;

class Solution {
    
    static class Node{
        int x;
        int y;
        int dir;
        int count;
        public Node(int x,int y,int dir,int count){
            this.x = x;
            this.y = y;
            this.dir = dir;
            this.count = count;
            
        }
        
    }
    
    static int[] dx = {-1,0,1,0};
    static int[] dy = {0,1,0,-1};
    static int sx,sy;
    public int solution(String[] board) {
        
        int answer = 0;
        boolean flag = false;
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length();j++){
                if(board[i].charAt(j)=='R'){
                    sx = i;
                    sy = j;
                    flag = true;
                    break;
                }
            }
            if(flag) break;
        }
        
        answer = bfs(board,sx,sy);
        
        return answer;
    }
    static int bfs(String[] board,int x,int y){
        Queue<Node> q = new ArrayDeque<>();
        boolean[][][] visited = new boolean[4][board.length][board[0].length()];
        q.offer(new Node(x,y,0,0));
        while(!q.isEmpty()){
            
            Node now = q.poll();
            visited[now.dir][now.x][now.y] = true;
        
            for(int i=0;i<4;i++){
                int nx = now.x+dx[i];
                int ny = now.y+dy[i];
                if(nx>=0&&ny>=0&&nx<board.length&&ny<board[0].length()&&!visited[i][nx][ny]
                   &&board[nx].charAt(ny)!='D') {
                    int[] arr = moveBoard(board,now.x,now.y,i);
                    visitedBoard(board,visited,now.x,now.y,i);
                    if(board[arr[0]].charAt(arr[1])=='G'){
                        return now.count+1;
                    }
                    q.offer(new Node(arr[0],arr[1],i,now.count+1));
                }
                     
    }
         
        }
        return -1;
    }
    static int[] moveBoard(String[] board,int x,int y,int dir){
        
        switch(dir){
            case 0:{
                for(int i=x;i>=0;i--){
                    if(board[i].charAt(y)=='D')
                        return new int[]{i+1,y};
                }
                return new int[]{0,y};
            }
            case 1:{
                for(int i=y;i<board[0].length();i++){
                    if(board[x].charAt(i)=='D')
                        return new int[]{x,i-1};
                }
                return new int[]{x,board[0].length()-1};
        
            }    
            case 2:{
                for(int i=x;i<board.length;i++){
                    if(board[i].charAt(y)=='D')
                        return new int[]{i-1,y};
                }
                return new int[]{board.length-1,y};
             
            }    
            case 3:{
                for(int i=y;i>=0;i--){
                    if(board[x].charAt(i)=='D')
                        return new int[]{x,i+1};
                }
                return new int[]{x,0};
            }    
        }
        return new int[]{-1,-1};
    }
    
    static void visitedBoard(String[] board,boolean[][][] v,int x,int y,int dir){
        switch(dir){
            case 0:{
                for(int i=x;i>=0;i--){
                    if(board[i].charAt(y)=='D') break;
                    v[dir][i][y] = true;
                }
                
                break;
            }  
            case 1:{
                for(int i=y;i<board[0].length();i++){
                    if(board[x].charAt(i)=='D') break;
                    v[dir][x][i] = true;
                }
                
                break;
            }
            case 2:{
                for(int i=x;i<board.length;i++){
                    if(board[i].charAt(y)=='D') break;
                    v[dir][i][y] = true;
                }
                
                break;
            }
            case 3:{
                for(int i=y;i>=0;i--){
                    if(board[x].charAt(i)=='D') break;
                    v[dir][x][i] = true;
                }
                break;
            }
                
                
        }
        
        
    }
    

}
