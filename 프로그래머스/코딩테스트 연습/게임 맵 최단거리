import java.util.*;
import java.io.*;

class Solution {
    
    static int[] dx={-1,0,1,0};
    static int[] dy={0,1,0,-1};
    
    static class Point{
        int x;
        int y;
        int count;
        public Point(int x,int y,int count){
            this.x = x;
            this.y = y;
            this.count = count;
        }
        
    }
    static boolean v[][];
    
    public int solution(int[][] maps) {
        v = new boolean[maps.length][maps[0].length];
        int answer = bfs(maps);
        return answer;
    }
    static int bfs(int[][] maps){
        int res=0;
        Queue<Point> q = new ArrayDeque();
        q.add(new Point(0,0,1));
        v[0][0] = true;
        
        while(!q.isEmpty()){
            Point now = q.poll();
            if(now.x==maps.length-1&&now.y==maps[0].length-1){
                return now.count;
            }
            
            for(int i=0;i<4;i++){
                int nx = now.x+dx[i];
                int ny = now.y+dy[i];
                if(nx>=0&&ny>=0&&nx<maps.length&&ny<maps[0].length&&maps[nx][ny]==1&&!v[nx][ny]){
                    q.add(new Point(nx,ny,now.count+1));
                    v[nx][ny] = true;
                }
                
            }
            
        
            
        }
        
        return -1;
    }
}
