import java.util.*;
import java.io.*;

class Solution {
    static class Node{
        int index;
        int cost;
        public Node(int index,int cost){
            this.index = index;
            this.cost = cost;
        }
    }
    static ArrayList<Node>[] graph;
    static final int INF = 500001;
    public int solution(int N, int[][] road, int K) {
        int answer = 0;
        graph = new ArrayList[N+1];
        int[] dist = new int[N+1];
        for(int i=0;i<=N;i++) {
            graph[i] = new ArrayList<>();
            dist[i] = INF;
        }
        
        for(int i=0;i<road.length;i++) {
            graph[road[i][0]].add(new Node(road[i][1],road[i][2])); 
            graph[road[i][1]].add(new Node(road[i][0],road[i][2]));
        }
        answer = dijkstra(N,K,dist);
        return answer;
    }
    static int dijkstra(int N,int K,int[] dist){
        PriorityQueue<Node> pq = new PriorityQueue<>((o1,o2)->o1.cost-o2.cost);
        boolean[] visited = new boolean[N+1];
        dist[1] = 0;
        pq.offer(new Node(1,0));
        int res = 0;
        while(!pq.isEmpty()){
            Node now = pq.poll();
            if(visited[now.index]) continue;
            visited[now.index] = true;
            res++;
            System.out.println(now.index);
            for(Node next: graph[now.index]){
                int c = dist[now.index]+next.cost;
                if(c<dist[next.index]&&c<=K){
                    dist[next.index] = c;
                    pq.offer(new Node(next.index,c));
                }                
            }
        }
        return res;
    }
}
