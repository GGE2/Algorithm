import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        ArrayList<Integer>[] graph = new ArrayList[n+1];
        ArrayList<Integer>[] reversedGraph = new ArrayList[n+1];
        
        for(int i=0; i<=n; i++){
            graph[i] = new ArrayList<>();
            reversedGraph[i] = new ArrayList<>();
        }

        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            graph[start].add(end);
            reversedGraph[end].add(start);
        }
        
        st = new StringTokenizer(br.readLine());
        int S = Integer.parseInt(st.nextToken());
        int T = Integer.parseInt(st.nextToken());
        Set<Integer> s1 = new HashSet<>();
        Set<Integer> s2 = new HashSet<>();
        Set<Integer> s3 = new HashSet<>();
        Set<Integer> s4 = new HashSet<>();
        dfs(S,T,1,graph,new boolean[n+1],s1);
        dfs(T,S,1,graph,new boolean[n+1],s2);
        dfs(S,S,-1,reversedGraph,new boolean[n+1],s3);
        dfs(T,T,-1,reversedGraph,new boolean[n+1],s4);

        s1.retainAll(s2);
        s1.retainAll(s3);
        s1.retainAll(s4);
        
        int answer = s1.size();
        
        if(s1.contains(S)) answer--;
        if(s1.contains(T)) answer--;
        System.out.println(answer);
    }
    static void dfs(int now,int destination,int flag,ArrayList<Integer>[] graph,boolean[] visited,Set<Integer> set){
        if(flag!=-1&&now==destination)
            return ;
        visited[now] = true;
        for(int next : graph[now]){
            if(visited[next]) continue;
            set.add(next);
            dfs(next,destination,flag,graph,visited,set);
        }
        return ;
    }
}
